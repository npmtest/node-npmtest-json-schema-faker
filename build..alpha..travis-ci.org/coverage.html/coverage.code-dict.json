{"/home/travis/build/npmtest/node-npmtest-json-schema-faker/test.js":"/* istanbul instrument in package npmtest_json_schema_faker */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-json-schema-faker/lib.npmtest_json_schema_faker.js":"/* istanbul instrument in package npmtest_json_schema_faker */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_json_schema_faker = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_json_schema_faker = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-json-schema-faker/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-json-schema-faker && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_json_schema_faker */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_json_schema_faker\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_json_schema_faker.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_json_schema_faker.rollup.js'] =\n            local.assetsDict['/assets.npmtest_json_schema_faker.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_json_schema_faker.__dirname + '/lib.npmtest_json_schema_faker.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-json-schema-faker/node_modules/json-schema-faker/lib/index.js":"function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nvar $RefParser = _interopDefault(require('json-schema-ref-parser'));\nvar tslib_1 = require('tslib');\n\n// dynamic proxy for custom generators\nfunction proxy(gen) {\n    return function (value) {\n        var fn = value;\n        var args = [];\n        // support for nested object, first-key is the generator\n        if (typeof value === 'object') {\n            fn = Object.keys(value)[0];\n            // treat the given array as arguments,\n            if (Array.isArray(value[fn])) {\n                // if the generator is expecting arrays they should be nested, e.g. `[[1, 2, 3], true, ...]`\n                args = value[fn];\n            }\n            else {\n                args.push(value[fn]);\n            }\n        }\n        // support for keypaths, e.g. \"internet.email\"\n        var props = fn.split('.');\n        // retrieve a fresh dependency\n        var ctx = gen();\n        while (props.length > 1) {\n            ctx = ctx[props.shift()];\n        }\n        // retrieve last value from context object\n        value = typeof ctx === 'object' ? ctx[props[0]] : ctx;\n        // invoke dynamic generators\n        if (typeof value === 'function') {\n            value = value.apply(ctx, args);\n        }\n        return value;\n    };\n}\n/**\n * Container is used to wrap external generators (faker, chance, casual, etc.) and its dependencies.\n *\n * - `jsf.extend('faker')` will enhance or define the given dependency.\n * - `jsf.define('faker')` will provide the \"faker\" keyword support.\n *\n * RandExp is not longer considered an \"extension\".\n */\nvar Container = (function () {\n    function Container() {\n        // dynamic requires - handle all dependencies\n        // they will NOT be included on the bundle\n        this.registry = {};\n        this.support = {};\n    }\n    /**\n     * Override dependency given by name\n     * @param name\n     * @param callback\n     */\n    Container.prototype.extend = function (name, callback) {\n        var _this = this;\n        this.registry[name] = callback(this.registry[name]);\n        // built-in proxy (can be overridden)\n        if (!this.support[name]) {\n            this.support[name] = proxy(function () { return _this.registry[name]; });\n        }\n    };\n    /**\n     * Set keyword support by name\n     * @param name\n     * @param callback\n     */\n    Container.prototype.define = function (name, callback) {\n        this.support[name] = callback;\n    };\n    /**\n     * Returns dependency given by name\n     * @param name\n     * @returns {Dependency}\n     */\n    Container.prototype.get = function (name) {\n        if (typeof this.registry[name] === 'undefined') {\n            throw new ReferenceError('\"' + name + '\" dependency doesn\\'t exist.');\n        }\n        return this.registry[name];\n    };\n    /**\n     * Apply a custom keyword\n     * @param schema\n     */\n    Container.prototype.wrap = function (schema) {\n        var keys = Object.keys(schema);\n        var length = keys.length;\n        while (length--) {\n            var fn = keys[length];\n            var gen = this.support[fn];\n            if (typeof gen === 'function') {\n                schema.generate = function () { return gen(schema[fn], schema); };\n                break;\n            }\n        }\n        return schema;\n    };\n    return Container;\n}());\n\n/**\n * This class defines a registry for custom formats used within JSF.\n */\nvar Registry = (function () {\n    function Registry() {\n        // empty by default\n        this.data = {};\n    }\n    /**\n     * Registers custom format\n     */\n    Registry.prototype.register = function (name, callback) {\n        this.data[name] = callback;\n    };\n    /**\n     * Register many formats at one shot\n     */\n    Registry.prototype.registerMany = function (formats) {\n        for (var name in formats) {\n            this.data[name] = formats[name];\n        }\n    };\n    /**\n     * Returns element by registry key\n     */\n    Registry.prototype.get = function (name) {\n        var format = this.data[name];\n        return format;\n    };\n    /**\n     * Returns the whole registry content\n     */\n    Registry.prototype.list = function () {\n        return this.data;\n    };\n    return Registry;\n}());\n\n// instantiate\nvar registry = new Registry();\n/**\n * Custom format API\n *\n * @see https://github.com/json-schema-faker/json-schema-faker#custom-formats\n * @param nameOrFormatMap\n * @param callback\n * @returns {any}\n */\nfunction formatAPI(nameOrFormatMap, callback) {\n    if (typeof nameOrFormatMap === 'undefined') {\n        return registry.list();\n    }\n    else if (typeof nameOrFormatMap === 'string') {\n        if (typeof callback === 'function') {\n            registry.register(nameOrFormatMap, callback);\n        }\n        else {\n            return registry.get(nameOrFormatMap);\n        }\n    }\n    else {\n        registry.registerMany(nameOrFormatMap);\n    }\n}\n\n/**\n * This class defines a registry for custom settings used within JSF.\n */\nvar OptionRegistry = (function (_super) {\n    tslib_1.__extends(OptionRegistry, _super);\n    function OptionRegistry() {\n        var _this = _super.call(this) || this;\n        _this.data['failOnInvalidTypes'] = true;\n        _this.data['defaultInvalidTypeProduct'] = null;\n        _this.data['failOnInvalidFormat'] = true;\n        _this.data['useDefaultValue'] = false;\n        _this.data['requiredOnly'] = false;\n        _this.data['maxItems'] = null;\n        _this.data['maxLength'] = null;\n        _this.data['defaultMinItems'] = 0;\n        _this.data['defaultRandExpMax'] = 10;\n        _this.data['alwaysFakeOptionals'] = false;\n        return _this;\n    }\n    return OptionRegistry;\n}(Registry));\n\n// instantiate\nvar registry$1 = new OptionRegistry();\n/**\n * Custom option API\n *\n * @param nameOrOptionMap\n * @returns {any}\n */\nfunction optionAPI(nameOrOptionMap) {\n    if (typeof nameOrOptionMap === 'string') {\n        return registry$1.get(nameOrOptionMap);\n    }\n    else {\n        return registry$1.registerMany(nameOrOptionMap);\n    }\n}\n\nvar RandExp = require('randexp');\n// set maximum default, see #193\nRandExp.prototype.max = 10;\nfunction _randexp(value) {\n    var re = new RandExp(value);\n    // apply given setting\n    re.max = optionAPI('defaultRandExpMax');\n    return re.gen();\n}\nfunction getSubAttribute(obj, dotSeparatedKey) {\n    var keyElements = dotSeparatedKey.split('.');\n    while (keyElements.length) {\n        var prop = keyElements.shift();\n        if (!obj[prop]) {\n            break;\n        }\n        obj = obj[prop];\n    }\n    return obj;\n}\n/**\n * Returns true/false whether the object parameter has its own properties defined\n *\n * @param obj\n * @param properties\n * @returns {boolean}\n */\nfunction hasProperties(obj) {\n    var properties = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        properties[_i - 1] = arguments[_i];\n    }\n    return properties.filter(function (key) {\n        return typeof obj[key] !== 'undefined';\n    }).length > 0;\n}\n/**\n * Returns typecasted value.\n * External generators (faker, chance, casual) may return data in non-expected formats, such as string, when you might expect an\n * integer. This function is used to force the typecast.\n *\n * @param value\n * @param targetType\n * @returns {any}\n */\nfunction typecast(value, schema) {\n    // FIXME this function should cover most cases and should be reused within generators\n    switch (schema.type) {\n        case 'integer':\n            return parseInt(value, 10);\n        case 'number':\n            return parseFloat(value);\n        case 'string':\n            value = String(value);\n            var min = Math.max(schema.minLength || 0, 0);\n            var max = Math.min(schema.maxLength || Infinity, Infinity);\n            while (value.length < min) {\n                value += ' ' + value;\n            }\n            if (value.length > max) {\n                value = value.substr(0, max);\n            }\n            return value;\n        case 'boolean':\n            return !!value;\n        default:\n            return value;\n    }\n}\nfunction clone(arr) {\n    var out = [];\n    arr.forEach(function (item, index) {\n        if (typeof item === 'object' && item !== null) {\n            out[index] = Array.isArray(item) ? clone(item) : merge({}, item);\n        }\n        else {\n            out[index] = item;\n        }\n    });\n    return out;\n}\n// TODO refactor merge function\nfunction merge(a, b) {\n    for (var key in b) {\n        if (typeof b[key] !== 'object' || b[key] === null) {\n            a[key] = b[key];\n        }\n        else if (Array.isArray(b[key])) {\n            a[key] = (a[key] || []).concat(clone(b[key]));\n        }\n        else if (typeof a[key] !== 'object' || a[key] === null || Array.isArray(a[key])) {\n            a[key] = merge({}, b[key]);\n        }\n        else {\n            a[key] = merge(a[key], b[key]);\n        }\n    }\n    return a;\n}\nfunction clean(obj, isArray) {\n    if (!obj || typeof obj !== 'object') {\n        return obj;\n    }\n    if (Array.isArray(obj)) {\n        return obj\n            .map(function (value) { return clean(value, true); })\n            .filter(function (value) { return value; });\n    }\n    Object.keys(obj).forEach(function (k) {\n        obj[k] = clean(obj[k]);\n    });\n    if (!Object.keys(obj).length && isArray) {\n        return undefined;\n    }\n    return obj;\n}\nvar utils = {\n    getSubAttribute: getSubAttribute,\n    hasProperties: hasProperties,\n    typecast: typecast,\n    clone: clone,\n    merge: merge,\n    clean: clean,\n    randexp: _randexp\n};\n\n/// <reference path=\"../index.d.ts\" />\n/**\n * Returns random element of a collection\n *\n * @param collection\n * @returns {T}\n */\nfunction pick(collection) {\n    return collection[Math.floor(Math.random() * collection.length)];\n}\n/**\n * Returns shuffled collection of elements\n *\n * @param collection\n * @returns {T[]}\n */\nfunction shuffle(collection) {\n    var tmp, key, copy = collection.slice(), length = collection.length;\n    for (; length > 0;) {\n        key = Math.floor(Math.random() * length);\n        // swap\n        tmp = copy[--length];\n        copy[length] = copy[key];\n        copy[key] = tmp;\n    }\n    return copy;\n}\n/**\n * These values determine default range for random.number function\n *\n * @type {number}\n */\nvar MIN_NUMBER = -100;\nvar MAX_NUMBER = 100;\n/**\n * Returns a random integer between min (inclusive) and max (inclusive)\n * Using Math.round() will give you a non-uniform distribution!\n * @see http://stackoverflow.com/a/1527820/769384\n */\nfunction getRandom(min, max) {\n    return Math.random() * (max - min) + min;\n}\n/**\n * Generates random number according to parameters passed\n *\n * @param min\n * @param max\n * @param defMin\n * @param defMax\n * @param hasPrecision\n * @returns {number}\n */\nfunction number(min, max, defMin, defMax, hasPrecision) {\n    if (hasPrecision === void 0) { hasPrecision = false; }\n    defMin = typeof defMin === 'undefined' ? MIN_NUMBER : defMin;\n    defMax = typeof defMax === 'undefined' ? MAX_NUMBER : defMax;\n    min = typeof min === 'undefined' ? defMin : min;\n    max = typeof max === 'undefined' ? defMax : max;\n    if (max < min) {\n        max += min;\n    }\n    var result = getRandom(min, max);\n    if (!hasPrecision) {\n        return parseInt(result + '', 10);\n    }\n    return result;\n}\nvar random = {\n    pick: pick,\n    shuffle: shuffle,\n    number: number,\n};\n\nvar ParseError = (function (_super) {\n    tslib_1.__extends(ParseError, _super);\n    function ParseError(message, path) {\n        var _this = _super.call(this) || this;\n        _this.path = path;\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(_this, _this.constructor);\n        }\n        _this.name = 'ParseError';\n        _this.message = message;\n        _this.path = path;\n        return _this;\n    }\n    return ParseError;\n}(Error));\n\nvar inferredProperties = {\n    array: [\n        'additionalItems',\n        'items',\n        'maxItems',\n        'minItems',\n        'uniqueItems'\n    ],\n    integer: [\n        'exclusiveMaximum',\n        'exclusiveMinimum',\n        'maximum',\n        'minimum',\n        'multipleOf'\n    ],\n    object: [\n        'additionalProperties',\n        'dependencies',\n        'maxProperties',\n        'minProperties',\n        'patternProperties',\n        'properties',\n        'required'\n    ],\n    string: [\n        'maxLength',\n        'minLength',\n        'pattern'\n    ]\n};\ninferredProperties.number = inferredProperties.integer;\nvar subschemaProperties = [\n    'additionalItems',\n    'items',\n    'additionalProperties',\n    'dependencies',\n    'patternProperties',\n    'properties'\n];\n/**\n * Iterates through all keys of `obj` and:\n * - checks whether those keys match properties of a given inferred type\n * - makes sure that `obj` is not a subschema; _Do not attempt to infer properties named as subschema containers. The\n * reason for this is that any property name within those containers that matches one of the properties used for\n * inferring missing type values causes the container itself to get processed which leads to invalid output. (Issue 62)_\n *\n * @returns {boolean}\n */\nfunction matchesType(obj, lastElementInPath, inferredTypeProperties) {\n    return Object.keys(obj).filter(function (prop) {\n        var isSubschema = subschemaProperties.indexOf(lastElementInPath) > -1, inferredPropertyFound = inferredTypeProperties.indexOf(prop) > -1;\n        if (inferredPropertyFound && !isSubschema) {\n            return true;\n        }\n    }).length > 0;\n}\n/**\n * Checks whether given `obj` type might be inferred. The mechanism iterates through all inferred types definitions,\n * tries to match allowed properties with properties of given `obj`. Returns type name, if inferred, or null.\n *\n * @returns {string|null}\n */\nfunction inferType(obj, schemaPath) {\n    for (var typeName in inferredProperties) {\n        var lastElementInPath = schemaPath[schemaPath.length - 1];\n        if (matchesType(obj, lastElementInPath, inferredProperties[typeName])) {\n            return typeName;\n        }\n    }\n}\n\n/**\n * Generates randomized boolean value.\n *\n * @returns {boolean}\n */\nfunction booleanGenerator() {\n    return Math.random() > 0.5;\n}\n\nvar booleanType = booleanGenerator;\n\n/**\n * Generates null value.\n *\n * @returns {null}\n */\nfunction nullGenerator() {\n    return null;\n}\n\nvar nullType = nullGenerator;\n\n// TODO provide types\nfunction unique(path, items, value, sample, resolve, traverseCallback) {\n    var tmp = [], seen = [];\n    function walk(obj) {\n        var json = JSON.stringify(obj);\n        if (seen.indexOf(json) === -1) {\n            seen.push(json);\n            tmp.push(obj);\n        }\n    }\n    items.forEach(walk);\n    // TODO: find a better solution?\n    var limit = 100;\n    while (tmp.length !== items.length) {\n        walk(traverseCallback(value.items || sample, path, resolve));\n        if (!limit--) {\n            break;\n        }\n    }\n    return tmp;\n}\n// TODO provide types\nvar arrayType = function arrayType(value, path, resolve, traverseCallback) {\n    var items = [];\n    if (!(value.items || value.additionalItems)) {\n        if (utils.hasProperties(value, 'minItems', 'maxItems', 'uniqueItems')) {\n            throw new ParseError('missing items for ' + JSON.stringify(value), path);\n        }\n        return items;\n    }\n    // see http://stackoverflow.com/a/38355228/769384\n    // after type guards support subproperties (in TS 2.0) we can simplify below to (value.items instanceof Array)\n    // so that value.items.map becomes recognized for typescript compiler\n    var tmpItems = value.items;\n    if (tmpItems instanceof Array) {\n        return Array.prototype.concat.apply(items, tmpItems.map(function (item, key) {\n            var itemSubpath = path.concat(['items', key + '']);\n            return traverseCallback(item, itemSubpath, resolve);\n        }));\n    }\n    var minItems = value.minItems;\n    var maxItems = value.maxItems;\n    if (optionAPI('defaultMinItems') && minItems === undefined) {\n        // fix boundaries\n        minItems = !maxItems\n            ? optionAPI('defaultMinItems')\n            : Math.min(optionAPI('defaultMinItems'), maxItems);\n    }\n    if (optionAPI('maxItems')) {\n        // Don't allow user to set max items above our maximum\n        if (maxItems && maxItems > optionAPI('maxItems')) {\n            maxItems = optionAPI('maxItems');\n        }\n        // Don't allow user to set min items above our maximum\n        if (minItems && minItems > optionAPI('maxItems')) {\n            minItems = maxItems;\n        }\n    }\n    var length = random.number(minItems, maxItems, 1, 5), \n    // TODO below looks bad. Should additionalItems be copied as-is?\n    sample = typeof value.additionalItems === 'object' ? value.additionalItems : {};\n    for (var current = items.length; current < length; current++) {\n        var itemSubpath = path.concat(['items', current + '']);\n        var element = traverseCallback(value.items || sample, itemSubpath, resolve);\n        items.push(element);\n    }\n    if (value.uniqueItems) {\n        return unique(path.concat(['items']), items, value, sample, resolve, traverseCallback);\n    }\n    return items;\n};\n\nvar MIN_INTEGER = -100000000;\nvar MAX_INTEGER = 100000000;\nvar numberType = function numberType(value) {\n    var min = typeof value.minimum === 'undefined' ? MIN_INTEGER : value.minimum, max = typeof value.maximum === 'undefined' ? MAX_INTEGER : value.maximum, multipleOf = value.multipleOf;\n    if (multipleOf) {\n        max = Math.floor(max / multipleOf) * multipleOf;\n        min = Math.ceil(min / multipleOf) * multipleOf;\n    }\n    if (value.exclusiveMinimum && value.minimum && min === value.minimum) {\n        min += multipleOf || 1;\n    }\n    if (value.exclusiveMaximum && value.maximum && max === value.maximum) {\n        max -= multipleOf || 1;\n    }\n    if (min > max) {\n        return NaN;\n    }\n    if (multipleOf) {\n        return Math.floor(random.number(min, max) / multipleOf) * multipleOf;\n    }\n    return random.number(min, max, undefined, undefined, true);\n};\n\n// The `integer` type is just a wrapper for the `number` type. The `number` type\n// returns floating point numbers, and `integer` type truncates the fraction\n// part, leaving the result as an integer.\nvar integerType = function integerType(value) {\n    var generated = numberType(value);\n    // whether the generated number is positive or negative, need to use either\n    // floor (positive) or ceil (negative) function to get rid of the fraction\n    return generated > 0 ? Math.floor(generated) : Math.ceil(generated);\n};\n\nvar LIPSUM_WORDS = ('Lorem ipsum dolor sit amet consectetur adipisicing elit sed do eiusmod tempor incididunt ut labore'\n    + ' et dolore magna aliqua Ut enim ad minim veniam quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea'\n    + ' commodo consequat Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla'\n    + ' pariatur Excepteur sint occaecat cupidatat non proident sunt in culpa qui officia deserunt mollit anim id est'\n    + ' laborum').split(' ');\n/**\n * Generates randomized array of single lorem ipsum words.\n *\n * @param length\n * @returns {Array.<string>}\n */\nfunction wordsGenerator(length) {\n    var words = random.shuffle(LIPSUM_WORDS);\n    return words.slice(0, length);\n}\n\n// fallback generator\nvar anyType = { type: ['string', 'number', 'integer', 'boolean'] };\n// TODO provide types\nvar objectType = function objectType(value, path, resolve, traverseCallback) {\n    var props = {};\n    var properties = value.properties || {};\n    var patternProperties = value.patternProperties || {};\n    var requiredProperties = (value.required || []).slice();\n    var allowsAdditional = value.additionalProperties === false ? false : true;\n    var propertyKeys = Object.keys(properties);\n    var patternPropertyKeys = Object.keys(patternProperties);\n    var additionalProperties = allowsAdditional\n        ? (value.additionalProperties === true ? {} : value.additionalProperties)\n        : null;\n    if (!allowsAdditional &&\n        propertyKeys.length === 0 &&\n        patternPropertyKeys.length === 0 &&\n        utils.hasProperties(value, 'minProperties', 'maxProperties', 'dependencies', 'required')) {\n        throw new ParseError('missing properties for:\\n' + JSON.stringify(value, null, '  '), path);\n    }\n    if (optionAPI('requiredOnly') === true) {\n        requiredProperties.forEach(function (key) {\n            if (properties[key]) {\n                props[key] = properties[key];\n            }\n        });\n        return traverseCallback(props, path.concat(['properties']), resolve);\n    }\n    var min = Math.max(value.minProperties || 0, requiredProperties.length);\n    var max = Math.max(value.maxProperties || random.number(min, min + 5));\n    random.shuffle(patternPropertyKeys.concat(propertyKeys)).forEach(function (_key) {\n        if (requiredProperties.indexOf(_key) === -1) {\n            requiredProperties.push(_key);\n        }\n    });\n    // properties are read from right-to-left\n    var _props = optionAPI('alwaysFakeOptionals') ? requiredProperties\n        : requiredProperties.slice(0, random.number(min, max));\n    _props.forEach(function (key) {\n        // first ones are the required properies\n        if (properties[key]) {\n            props[key] = properties[key];\n        }\n        else {\n            var found;\n            // then try patternProperties\n            patternPropertyKeys.forEach(function (_key) {\n                if (key.match(new RegExp(_key))) {\n                    found = true;\n                    props[utils.randexp(key)] = patternProperties[_key];\n                }\n            });\n            if (!found) {\n                // try patternProperties again,\n                var subschema = patternProperties[key] || additionalProperties;\n                if (subschema) {\n                    // otherwise we can use additionalProperties?\n                    props[patternProperties[key] ? utils.randexp(key) : key] = subschema;\n                }\n            }\n        }\n    });\n    var current = Object.keys(props).length;\n    while (true) {\n        if (!(patternPropertyKeys.length || allowsAdditional)) {\n            break;\n        }\n        if (current >= min) {\n            break;\n        }\n        if (allowsAdditional) {\n            var word = wordsGenerator(1) + utils.randexp('[a-f\\\\d]{1,3}');\n            if (!props[word]) {\n                props[word] = additionalProperties || anyType;\n                current += 1;\n            }\n        }\n        patternPropertyKeys.forEach(function (_key) {\n            var word = utils.randexp(_key);\n            if (!props[word]) {\n                props[word] = patternProperties[_key];\n                current += 1;\n            }\n        });\n    }\n    if (!allowsAdditional && current < min) {\n        throw new ParseError('properties constraints were too strong to successfully generate a valid object for:\\n' +\n            JSON.stringify(value, null, '  '), path);\n    }\n    return traverseCallback(props, path.concat(['properties']), resolve);\n};\n\n/**\n * Helper function used by thunkGenerator to produce some words for the final result.\n *\n * @returns {string}\n */\nfunction produce() {\n    var length = random.number(1, 5);\n    return wordsGenerator(length).join(' ');\n}\n/**\n * Generates randomized concatenated string based on words generator.\n *\n * @returns {string}\n */\nfunction thunkGenerator(min, max) {\n    if (min === void 0) { min = 0; }\n    if (max === void 0) { max = 140; }\n    var min = Math.max(0, min), max = random.number(min, max), result = produce();\n    // append until length is reached\n    while (result.length < min) {\n        result += produce();\n    }\n    // cut if needed\n    if (result.length > max) {\n        result = result.substr(0, max);\n    }\n    return result;\n}\n\n/**\n * Generates randomized ipv4 address.\n *\n * @returns {string}\n */\nfunction ipv4Generator() {\n    return [0, 0, 0, 0].map(function () {\n        return random.number(0, 255);\n    }).join('.');\n}\n\nvar MOST_NEAR_DATETIME = 2524608000000;\n/**\n * Generates randomized date time ISO format string.\n *\n * @returns {string}\n */\nfunction dateTimeGenerator() {\n    var date = new Date();\n    var days = random.number(-1000, MOST_NEAR_DATETIME);\n    date.setTime(date.getTime() - days);\n    return date.toISOString();\n}\n\n/**\n * Predefined core formats\n * @type {[key: string]: string}\n */\nvar regexps = {\n    email: '[a-zA-Z\\\\d][a-zA-Z\\\\d-]{1,13}[a-zA-Z\\\\d]@{hostname}',\n    hostname: '[a-zA-Z]{1,33}\\\\.[a-z]{2,4}',\n    ipv6: '[a-f\\\\d]{4}(:[a-f\\\\d]{4}){7}',\n    uri: '[a-zA-Z][a-zA-Z0-9+-.]*'\n};\n/**\n * Generates randomized string basing on a built-in regex format\n *\n * @param coreFormat\n * @returns {string}\n */\nfunction coreFormatGenerator(coreFormat) {\n    return utils.randexp(regexps[coreFormat]).replace(/\\{(\\w+)\\}/, function (match, key) {\n        return utils.randexp(regexps[key]);\n    });\n}\n\nfunction generateFormat(value, invalid) {\n    var callback = formatAPI(value.format);\n    if (typeof callback === 'function') {\n        return callback(value);\n    }\n    switch (value.format) {\n        case 'date-time':\n            return dateTimeGenerator();\n        case 'ipv4':\n            return ipv4Generator();\n        case 'regex':\n            // TODO: discuss\n            return '.+?';\n        case 'email':\n        case 'hostname':\n        case 'ipv6':\n        case 'uri':\n            return coreFormatGenerator(value.format);\n        default:\n            if (typeof callback === 'undefined') {\n                if (optionAPI('failOnInvalidFormat')) {\n                    throw new Error('unknown registry key ' + JSON.stringify(value.format));\n                }\n                else {\n                    return invalid();\n                }\n            }\n            throw new Error('unsupported format \"' + value.format + '\"');\n    }\n}\nvar stringType = function stringType(value) {\n    var output;\n    var minLength = value.minLength;\n    var maxLength = value.maxLength;\n    if (optionAPI('maxLength')) {\n        // Don't allow user to set max length above our maximum\n        if (maxLength && maxLength > optionAPI('maxLength')) {\n            maxLength = optionAPI('maxLength');\n        }\n        // Don't allow user to set min length above our maximum\n        if (minLength && minLength > optionAPI('maxLength')) {\n            minLength = optionAPI('maxLength');\n        }\n    }\n    if (value.format) {\n        output = generateFormat(value, function () { return thunkGenerator(minLength, maxLength); });\n    }\n    else if (value.pattern) {\n        output = utils.randexp(value.pattern);\n    }\n    else {\n        output = thunkGenerator(minLength, maxLength);\n    }\n    while (output.length < minLength) {\n        output += Math.random() > 0.7 ? thunkGenerator() : utils.randexp('.+');\n    }\n    if (output.length > maxLength) {\n        output = output.substr(0, maxLength);\n    }\n    return output;\n};\n\nvar typeMap = {\n    boolean: booleanType,\n    null: nullType,\n    array: arrayType,\n    integer: integerType,\n    number: numberType,\n    object: objectType,\n    string: stringType\n};\n\n// TODO provide types\nfunction traverse(schema, path, resolve) {\n    schema = resolve(schema);\n    if (Array.isArray(schema.enum)) {\n        return random.pick(schema.enum);\n    }\n    // thunks can return sub-schemas\n    if (typeof schema.thunk === 'function') {\n        return traverse(schema.thunk(), path, resolve);\n    }\n    if (typeof schema.generate === 'function') {\n        return utils.typecast(schema.generate(), schema);\n    }\n    if (optionAPI('useDefaultValue') && 'default' in schema) {\n        return schema.default;\n    }\n    // TODO remove the ugly overcome\n    var type = schema.type;\n    if (Array.isArray(type)) {\n        type = random.pick(type);\n    }\n    else if (typeof type === 'undefined') {\n        // Attempt to infer the type\n        type = inferType(schema, path) || type;\n    }\n    if (typeof type === 'string') {\n        if (!typeMap[type]) {\n            if (optionAPI('failOnInvalidTypes')) {\n                throw new ParseError('unknown primitive ' + JSON.stringify(type), path.concat(['type']));\n            }\n            else {\n                return optionAPI('defaultInvalidTypeProduct');\n            }\n        }\n        else {\n            try {\n                return typeMap[type](schema, path, resolve, traverse);\n            }\n            catch (e) {\n                if (typeof e.path === 'undefined') {\n                    throw new ParseError(e.message, path);\n                }\n                throw e;\n            }\n        }\n    }\n    var copy = {};\n    if (Array.isArray(schema)) {\n        copy = [];\n    }\n    for (var prop in schema) {\n        if (typeof schema[prop] === 'object' && prop !== 'definitions') {\n            copy[prop] = traverse(schema[prop], path.concat([prop]), resolve);\n        }\n        else {\n            copy[prop] = schema[prop];\n        }\n    }\n    return utils.clean(copy);\n}\n\nfunction isKey(prop) {\n    return prop === 'enum' || prop === 'default' || prop === 'required' || prop === 'definitions';\n}\n// TODO provide types\nfunction run(schema, container) {\n    try {\n        return traverse(schema, [], function reduce(sub, maxReduceDepth) {\n            if (typeof maxReduceDepth === 'undefined') {\n                maxReduceDepth = random.number(1, 3);\n            }\n            if (!sub) {\n                return null;\n            }\n            if (Array.isArray(sub.allOf)) {\n                var schemas = sub.allOf;\n                delete sub.allOf;\n                // this is the only case where all sub-schemas\n                // must be resolved before any merge\n                schemas.forEach(function (subSchema) {\n                    utils.merge(sub, reduce(subSchema, maxReduceDepth + 1));\n                });\n            }\n            if (Array.isArray(sub.oneOf || sub.anyOf)) {\n                var key = sub.oneOf ? 'oneOf' : 'anyOf';\n                var mix = sub.oneOf || sub.anyOf;\n                delete sub.anyOf;\n                delete sub.oneOf;\n                return {\n                    thunk: function () { return random.pick(mix); }\n                };\n            }\n            for (var prop in sub) {\n                if ((Array.isArray(sub[prop]) || typeof sub[prop] === 'object') && !isKey(prop)) {\n                    sub[prop] = reduce(sub[prop], maxReduceDepth);\n                }\n            }\n            return container.wrap(sub);\n        });\n    }\n    catch (e) {\n        if (e.path) {\n            throw new Error(e.message + ' in ' + '/' + e.path.join('/'));\n        }\n        else {\n            throw e;\n        }\n    }\n}\n\nvar container = new Container();\nvar jsf = function (schema, refs, cwd) {\n    var $refs = {};\n    if (Array.isArray(refs)) {\n        refs.forEach(function (schema) {\n            $refs[schema.id] = schema;\n        });\n    }\n    else {\n        $refs = refs || {};\n    }\n    var fixedRefs = {\n        order: 300,\n        canRead: true,\n        read: function (file, callback) {\n            callback(null, $refs[file.url] || $refs[file.url.split('/').pop()]);\n        },\n    };\n    // normalize basedir (browser aware)\n    cwd = cwd || (typeof process !== 'undefined' ? process.cwd() : '');\n    cwd = cwd.replace(/\\/+$/, '') + '/';\n    return $RefParser.dereference(cwd, schema, {\n        resolve: {\n            fixedRefs: fixedRefs,\n        },\n    }).then(function (schema) { return run(schema, container); });\n};\njsf.utils = utils;\njsf.format = formatAPI;\njsf.option = optionAPI;\n// built-in support\ncontainer.define('pattern', utils.randexp);\n// returns itself for chaining\njsf.extend = function (name, cb) {\n    container.extend(name, cb);\n    return jsf;\n};\njsf.define = function (name, cb) {\n    container.define(name, cb);\n    return jsf;\n};\njsf.locate = function (name) {\n    return container.get(name);\n};\njsf.version = '0.5.0-rc1';\n\nmodule.exports = jsf;\n"}